---js
{
  date:      `2019-11-19`,
  layout:    `frame.njk`,
  permalink: false,    //...`wasm_example.html`,
  tags:      [ `post` ],
  eleventyExcludeFromCollections: true,  //..... false,
  no_comments: false,

  rank_n:     4,
  title_s:    `Wasm example`,
  subtitle_s: `Instantiating a wasm module`,
  abstract_s: `Accessing wasm functions`,
  author_s:   `octoxalis`,
}
---
[comment]: # (======== Post ========)
# Instantiating a wasm module

Fetching and caching wasm functions{ data--="page_intro" }

{% _anchor %}
## A useful example
{% end_anchor %}

<slot-slice>
<slot-css prism_css/>
<slot-css prism_ui/>
<slot-js prism_js/>

To illustrate the semantic power of **{{A_o.NAME_s}}**, here is 

The purpose of this refactoring is to simplify Atomic light _library_ retaining only the most useful use cases and to homogenize the variable names accoding to **{{A_o.NAME_s}}** naming scheme.
The most notable things are that only three functions are declared: `fetch__o`, the main function, and two of its subsidiary functions: `query__s` and `response__o`.
`fetch__o` argument is named, well: `fetch_o` and its returned Promise, well: `promise_o`
{% _note_txt %}
**two** underscores for the function and only **one** for the `Object` argument
{% end_note_txt %}
, the same `fetch__o` argument is reused in the subsidiary functions
{% _note_txt %}
it's therefore easy to understand that it's the same Object
{% end_note_txt %}
.

Both input and ouput of the fetch request are any type and use no specifier letter for their property: `fetch_o.input_` and `response_o.output_`


{% _code_block %}
    title_s: 'wasm_export.js',
    lang_s: 'javascript',
[//]:#(_code_block)
{% raw %}
/**
 * : Fetch a WebAssembly module
 * ... cache it as arrayBuffer in IndexedDB
 * ... namespace_s property (default to 'wasm') as IndexedDB key
 * @param {Object} export_o: { url_s, namespace_s:'wasm', version_n:1, import_o:{} }
 * !!! export_o.url_s is mandatory
 * @return {Object} All properties exported from the WebAssembly module
 */
import * as cache from './idb.js'

export const WAexport__o = async export_o =>
{
  export_o = Object.assign(
    {    //: default
      namespace_s: 'wasm',
      version_n: 1,
      import_o: {},
    },
    export_o )
  export_o.import_o = Object.assign(
    {    //: default
      env: { abort: () => console.log("!!! Import fail") }    //: a callable is mandatory
    },
    export_o.import_o || {} )

  const module__s = url_s =>
  {
    let start_n = url_s.lastIndexOf( '/' ) + 1  //: 0 if '/' not found
    let end_n = url_s.lastIndexOf( '.' )
    if ( end_n === -1 ) end_n = url_s.length
    return url_s.substring( start_n, end_n )
  }

  let cache_o
  const key_s = module__s( export_o.url_s )
  return await cache.idb__o( export_o.namespace_s, export_o.version_n )
    .then( idb_o =>
    {
      cache_o = idb_o
      return cache_o.get__s( key_s )
    } )
    .then( buffer_a =>
    {
      return ( buffer_a ) ?
        WebAssembly.instantiate( buffer_a, export_o.import_o ).exports
        :
        fetch( export_o.url_s )
          .then( response_o => response_o.arrayBuffer() )
          .then( buffer_a =>
            {
              cache_o.put__v( key_s, buffer_a )
              return WebAssembly.instantiate( buffer_a, export_o.import_o )
            } )
          .then( instance_o => instance_o.instance.exports )
    } )
}
{% endraw %}
{% end_code_block %}

</slot-slice>

[comment]: # (======== Links ========)

[Atomic]: https://github.com/cferdinandi/atomic
[Go Make Things]: https://gomakethings.com/
[Why I still use XHR instead of the Fetch API]: https://gomakethings.com/why-i-still-use-xhr-instead-of-the-fetch-api/
[Promise-based XHR]: https://gomakethings.com/promise-based-xhr/